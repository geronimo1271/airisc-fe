default:
  image: harbor.sdch.develondigital.com/gitlab-runner/generic-shipit:latest
before_script:
  # ##
  # ## Install ssh-agent if not already installed, it is required by Docker.
  # ## (change apt-get to yum if you use an RPM-based image)
  # ##
  # - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client git -y )'

  ##
  ## Run ssh-agent (inside the build environment)
  ##
  - eval $(ssh-agent -s)

  ##
  ## Give the right permissions, otherwise ssh-add will refuse to add files
  ## Add the SSH key stored in SSH_PRIVATE_KEY file type CI/CD variable to the agent store
  ##
  - chmod 400 "$SSH_PRIVATE_KEY"
  - ssh-add "$SSH_PRIVATE_KEY"

  ##
  ## Create the SSH directory and give it the right permissions
  ##
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  
  ##
  ## use ssh-keyscan to scan the keys of your private server.
  ## Replace example.com with your private server's domain name. Repeat that
  ## command if you have more than one server to connect to.
  ##
  - ssh-keyscan 34.159.16.110 >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts

  # ##
  # ## Install shipit and 
  # ##
  # - npm install --save-dev shipit-cli
  # - npm install --save-dev shipit-deploy


deploy-job:
  stage: deploy
  script:
    - "DEPLOY_ENV=gitlab npx shipit $DEPLOY_VARIABLE deploy"
  environment:
    name: $DEPLOY_VARIABLE
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      variables:
        DEPLOY_VARIABLE: "production"
    - if: $CI_COMMIT_BRANCH == 'staging'
      variables:
        DEPLOY_VARIABLE: "staging"

# sast:
#   stage: test
#   # Fallback script in case it is not imported
#   script: echo "Running SAST"
#   rules:
#     - if: $CI_PIPELINE_SOURCE =~ 'merge_request_event'
#       when: never

# include:
#   - template: Security/SAST.gitlab-ci.yml
