// src/runtime/plugin.ts
import { defineNuxtPlugin } from "nuxt/app";

// src/runtime/plugin-impl.ts
import { computed } from "vue";

// ../../node_modules/hookable/dist/index.mjs
var defaultTask = { run: (function_) => function_() };
var _createTask = () => defaultTask;
var createTask = typeof console.createTask !== "undefined" ? console.createTask : _createTask;

// ../../node_modules/unhead/dist/index.mjs
var activeHead;
var getActiveHead = () => activeHead;
var coreComposableNames = [
  "getActiveHead"
];
var composableNames = [
  "useHead",
  "useSeoMeta",
  "useHeadSafe",
  "useServerHead",
  "useServerSeoMeta",
  "useServerHeadSafe",
  // deprecated
  "useTagTitle",
  "useTagBase",
  "useTagMeta",
  "useTagMetaFlat",
  "useTagLink",
  "useTagScript",
  "useTagStyle",
  "useTagNoscript",
  "useHtmlAttrs",
  "useBodyAttrs",
  "useTitleTemplate",
  "useServerTagTitle",
  "useServerTagBase",
  "useServerTagMeta",
  "useServerTagMetaFlat",
  "useServerTagLink",
  "useServerTagScript",
  "useServerTagStyle",
  "useServerTagNoscript",
  "useServerHtmlAttrs",
  "useServerBodyAttrs",
  "useServerTitleTemplate"
];
var unheadComposablesImports = [
  {
    from: "unhead",
    imports: [...coreComposableNames, ...composableNames]
  }
];

// ../../node_modules/@unhead/vue/dist/shared/vue.bc44c3fa.mjs
import { unref, version, getCurrentInstance, inject, nextTick, ref, watchEffect, watch, onBeforeUnmount, onDeactivated, onActivated } from "vue";
function resolveUnref(r) {
  return typeof r === "function" ? r() : unref(r);
}
function resolveUnrefHeadInput(ref3, lastKey = "") {
  if (ref3 instanceof Promise)
    return ref3;
  const root = resolveUnref(ref3);
  if (!ref3 || !root)
    return root;
  if (Array.isArray(root))
    return root.map((r) => resolveUnrefHeadInput(r, lastKey));
  if (typeof root === "object") {
    return Object.fromEntries(
      Object.entries(root).map(([k, v]) => {
        if (k === "titleTemplate" || k.startsWith("on"))
          return [k, unref(v)];
        return [k, resolveUnrefHeadInput(v, k)];
      })
    );
  }
  return root;
}
var Vue3 = version.startsWith("3");
var IsBrowser = typeof window !== "undefined";
var headSymbol = "usehead";
function injectHead() {
  return getCurrentInstance() && inject(headSymbol) || getActiveHead();
}
function clientUseHead(input, options = {}) {
  const head = injectHead();
  const deactivated = ref(false);
  const resolvedInput = ref({});
  watchEffect(() => {
    resolvedInput.value = deactivated.value ? {} : resolveUnrefHeadInput(input);
  });
  const entry = head.push(resolvedInput.value, options);
  watch(resolvedInput, (e) => {
    entry.patch(e);
  });
  const vm = getCurrentInstance();
  if (vm) {
    onBeforeUnmount(() => {
      entry.dispose();
    });
    onDeactivated(() => {
      deactivated.value = true;
    });
    onActivated(() => {
      deactivated.value = false;
    });
  }
  return entry;
}
function serverUseHead(input, options = {}) {
  const head = injectHead();
  return head.push(input, options);
}
function useHead(input, options = {}) {
  const head = injectHead();
  if (head) {
    const isBrowser = IsBrowser || !!head.resolvedOptions?.document;
    if (options.mode === "server" && isBrowser || options.mode === "client" && !isBrowser)
      return;
    return isBrowser ? clientUseHead(input, options) : serverUseHead(input, options);
  }
}

// ../../node_modules/@unhead/vue/dist/index.mjs
import { getCurrentInstance as getCurrentInstance2, ref as ref2, watchEffect as watchEffect2 } from "vue";
var coreComposableNames2 = [
  "injectHead"
];
var unheadVueComposablesImports = {
  "@unhead/vue": [...coreComposableNames2, ...composableNames]
};

// src/runtime/plugin-impl.ts
var plugin_impl_default = (nuxtApp) => {
  const mixin = {
    created() {
      if (typeof this.$options?.jsonld !== "function") {
        return;
      }
      const jsonComputed = computed(() => this.$options.jsonld.call(this));
      useHead(() => ({
        script: [
          {
            type: "application/ld+json",
            children: jsonComputed.value ? JSON.stringify(jsonComputed.value, null, "") : void 0
          }
        ]
      }));
    }
  };
  const plugin = {
    install(Vue) {
      Vue.mixin(mixin);
    }
  };
  nuxtApp.vueApp.use(plugin);
};

// src/runtime/plugin.ts
var plugin_default = defineNuxtPlugin(plugin_impl_default);
export {
  plugin_default as default
};
